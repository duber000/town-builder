# Deployment to manage application Pods
apiVersion: apps/v1
kind: Deployment
metadata:
  name: town-builder-app
  namespace: town-builder # Make sure this matches your namespace
  labels:
    app: town-builder
spec:
  replicas: 2 # Adjust the number of instances as needed
  selector:
    matchLabels:
      app: town-builder
  template:
    metadata:
      labels:
        app: town-builder
    spec:
      # Optional: initContainer to generate shapes before the app starts
      # This requires a shared volume between the initContainer and the main container.
      initContainers:
      - name: generate-shapes
        image: YOUR_REGISTRY/town-builder:latest # Replace with your actual image path
        command: ["uv", "run", "flask", "generate-shapes"]
        volumeMounts:
        - name: static-props-data
          # Mount only the specific subdirectory where shapes are generated
          mountPath: /app/static/models/props
      containers:
      - name: town-builder
        image: YOUR_REGISTRY/town-builder:latest # Replace with your actual image path
        imagePullPolicy: Always # Or IfNotPresent
        ports:
        - name: http
          containerPort: 5000 # Port exposed by uWSGI in the container
        envFrom:
        - secretRef:
            name: town-builder-secrets
        - configMapRef:
            name: town-builder-config
        readinessProbe:
          httpGet:
            path: /readyz # Use the readiness endpoint added to app.py
            port: http
          initialDelaySeconds: 10 # Time before first probe
          periodSeconds: 15 # How often to probe
          timeoutSeconds: 5
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /healthz # Use the liveness endpoint added to app.py
            port: http
          initialDelaySeconds: 20 # Time before first probe
          periodSeconds: 20 # How often to probe
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        # Mount the volume for the generated shapes (if using initContainer)
        - name: static-props-data
          mountPath: /app/static/models/props
        resources: {} # Optional: Define resource requests and limits
          # requests:
          #   cpu: "100m"
          #   memory: "128Mi"
          # limits:
          #   cpu: "500m"
          #   memory: "512Mi"
      volumes:
      # Define the volume shared between initContainer and main container
      - name: static-props-data
        emptyDir: {} # Simple ephemeral volume within the Pod
