<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Python Town Builder</title>
    <style>
        body, html { margin: 0; padding: 0; height: 100%; overflow: hidden; }
        #canvas-container { width: 100%; height: 100%; display: block; }
        #toolbar {
            position: absolute;
            top: 0;
            left: 0;
            background: rgba(0,0,0,0.7);
            color: white;
            padding: 10px;
        }
        .category {
            margin-bottom: 10px;
        }
        .model-item {
            cursor: pointer;
            padding: 5px;
            border: 1px solid #444;
            margin: 2px 0;
        }
    </style>
</head>
<body>
    <div id="toolbar">
        <h3>Town Builder</h3>
        {% for category, models in models.items() %}
        <div class="category">
            <h4>{{ category.title() }}</h4>
            {% for model in models %}
            <div class="model-item" data-category="{{ category }}" data-model="{{ model }}">
                {{ model.replace('.gltf', '') }}
            </div>
            {% endfor %}
        </div>
        {% endfor %}
        <button id="save-town">Save Town</button>
        <button id="load-town">Load Town</button>
    </div>
    
    <div id="canvas-container"></div>
    
    <!-- For pure Python solution, we'll use Pyodide or Pygbag to run Python in the browser -->
    <script src="https://cdn.jsdelivr.net/pyodide/v0.22.1/full/pyodide.js"></script>
    <script>
        // This is a placeholder for the Python integration
        // In a complete implementation, you'd use Pyodide/Pygbag or WebSockets for real-time updates
        
        async function loadPyodide() {
            let pyodide = await loadPyodide();
            await pyodide.loadPackagesFromImports(`
                import sys
                import micropip
                await micropip.install('numpy')
                
                class TownRenderer:
                    def __init__(self):
                        self.scene = []
                    
                    def add_model(self, category, model, position):
                        self.scene.append({
                            "category": category,
                            "model": model,
                            "position": position
                        })
                    
                    def render(self):
                        # This is where you'd integrate with a Python 3D rendering library
                        # In a real implementation, you might use Panda3D compiled for WebAssembly
                        # or use WebSockets to communicate with the server
                        return "Scene rendered with " + str(len(self.scene)) + " objects"
                
                town_renderer = TownRenderer()
            `);
            
            window.pyodide = pyodide;
            window.town_renderer = pyodide.globals.get('town_renderer');
        }
        
        // Initialize the Python environment
        loadPyodide();
        
        // Setup event listeners
        document.querySelectorAll('.model-item').forEach(item => {
            item.addEventListener('click', function() {
                const category = this.dataset.category;
                const model = this.dataset.model;
                
                // Place the model at a default position
                fetch('/api/model/' + category + '/' + model)
                    .then(response => response.json())
                    .then(modelInfo => {
                        console.log('Selected model:', modelInfo);
                        // Add model to scene
                        // In a real implementation, you'd use mouse position for placement
                    });
            });
        });
        
        document.getElementById('save-town').addEventListener('click', function() {
            // Save town data to server
            fetch('/api/town', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    buildings: [],  // Don't forget to add terrain and roads
                })
            })
            .then(response => response.json())
            .then(data => {
                alert('Town saved successfully!');
            });
        });
        
        document.getElementById('load-town').addEventListener('click', function() {
            // Load town data from server
            fetch('/api/town')
                .then(response => response.json())
                .then(data => {
                    console.log('Loaded town:', data);
                    // Render the loaded town
                });
        });
    </script>
</body>
</html>
